#summary Symja running on Google App Engine AJAX interface (Eval API)
#labels Featured
#sidebar TableOfContents

<wiki:toc max_depth="2" />

= The user interface =

== Common evaluation buttons ==
The following buttons are always defined in the user interface:
  * *Sym* - symbolic evaluation
  * *Num* - numeric evaluation
  * *C* - clears the input text area

== Persisting user defined symbols into Google Appengine datastore ==
Through the *Login* link users can sign in with their Google User Account.
When logged in, it's possible to persist so called _$ user symbol_ (i.e. user variables) in the datastore.

You can for example create your own rules for a new defined _$ user symbol_ {{{$cube}}}. Type this in the input text area and press the *Sym* button:
{{{
 SetAttributes[$cube,Listable];
 $cube[x_]:=x^3
}}}

Now you can evaluate a list of numbers by evaluating
{{{
 $cube[{1,2,3,4,5}] 
}}}

In the same way you can define constants:
{{{
 $theAnswerToAllQuestions = 42 
}}}

By evaluating
{{{
 $theAnswerToAllQuestions 
}}} 
you get the defined value.

If you are logging in again at a later date you can reuse the _$ user symbols_ without redefining.

== Buttons for logged in users ==
The following buttons are *only* defined in the user interface, if you are logged in with your Google Account:
  * *Def* - shows the definition of the _$ user symbol_ that the user has typed into the upper input text area (i.e. the _$ user symbol_ *$cube* used in the example above, will return the defined rules).
  * *Vars* - show all defined user variabeles from Google Appengine store (up to 100 are allowed)

= Advanced configuration =

== AJAX Evaluation API ==
The simplified online *[http://mobmath.appspot.com/ Eval API]* lets you dynamically generate calculation forms. To see the Eval API in action, open up a browser window and copy the following URL into it:
  * {{{http://mobmath.appspot.com/?ci=x1:X:i:10|y1:Y:i:2&ca=x!:x1!|Fibonacci[x]:Fibonacci[x1]|Binomial[x,y]:Binomial[x1,y1]}}}

On testiphone.com you can try the same example online in an [http://www.testiphone.com/?view=hor&url=http%3A%2F%2Fmobmath.appspot.com%2F%3Fci%3Dx1%3AX%3Ai%3A10%7Cy1%3AY%3Ai%3A2%26ca%3Dx%21%3Ax1%21%7CFibonacci%5Bx%5D%3AFibonacci%5Bx1%5D%7CBinomial%5Bx%2Cy%5D%3ABinomial%5Bx1%2Cy1%5D iPhone simulator] (you should use the Safari browser to get the real experience). 

Here is a link for the general [http://www.testiphone.com/?view=hor&url=http%3A%2F%2Fmobmath.appspot.com%2F iPhone AJAX interface]

The corresponding JSP file for the Evaluation API is the *index.jsp* file

== Install additional packages ==
Symja is extendable through the Package[] command. If you've installed AJAXSymja on Google Appengine, you can add new packages through the *admin.jsp* interface. Only users which are administrators for the Google Appengine application are allowed to use the *admin.jsp* interface. 

Example package for generating Laguerre or Legendre polynomials (*Note* - public symbols have to start with an uppercase character):
{{{
Package[ 
  "Polynomials", 
  (* define the public available symbols *)
  {LaguerreP, LegendreP}, 
{ 
  (* Laguerre polynomials 
     http://en.wikipedia.org/wiki/Laguerre_polynomials *) 
  LaguerreP[0,x_]:=1, 
  LaguerreP[1,x_]:=1-x, 
  LaguerreP[n_IntegerQ,x_]:= 
      ExpandAll[(2*n-1-x)*LaguerreP[n-1,x] - (n-1)^2*LaguerreP[n-2,x]] /; NonNegative[n], 
  (* Legendre polynomials 
     http://en.wikipedia.org/wiki/Legendre_polynomials *)
  LegendreP[n_IntegerQ,x_]:=
      1/(2^n)*Sum[ExpandAll[Binomial[n,k]^2*(x-1)^(n-k)*(x+1)^k], {k,0,n}] /; NonNegative[n]
} ]
}}}

After installing the package with the *Save package* button the new command
{{{
  LegendreP[7,x]
}}}
can be evaluated.

== Development ==
Browse source code in SVN:
  * [http://code.google.com/p/symja/source/browse/#svn/trunk/symja.ajax svn/trunk/symja.ajax]
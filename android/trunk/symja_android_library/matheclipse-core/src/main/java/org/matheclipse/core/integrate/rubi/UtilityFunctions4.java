package org.matheclipse.core.integrate.rubi;


import static org.matheclipse.core.expression.F.*;
import static org.matheclipse.core.integrate.rubi.UtilityFunctionCtors.*;
import static org.matheclipse.core.integrate.rubi.UtilityFunctions.*;

import org.matheclipse.core.interfaces.IAST;
import org.matheclipse.core.interfaces.IExpr;
import org.matheclipse.core.interfaces.ISymbol;
/** 
 * UtilityFunctions rules from the <a href="http://www.apmaths.uwo.ca/~arich/">Rubi -
 * rule-based integrator</a>.
 *  
 */
public class UtilityFunctions4 { 
  public static IAST RULES = List( 
SetDelayed(FunctionOfExponentialOfLinear($p("u"),$p("x",$s("Symbol"))),
    Module(List(Set($s("lst"),FunctionOfExponentialOfLinear($s("u"),$s("x"),False,False,False)),$s("a"),$s("b"),$s("f")),If(Or(FalseQ($s("lst")),FalseQ(Part($s("lst"),C1))),False,CompoundExpression(CompoundExpression(CompoundExpression(CompoundExpression(Set($s("a"),Part($s("lst"),C1)),Set($s("b"),Part($s("lst"),C2))),Set($s("f"),Part($s("lst"),C3))),If(And(MatchQ($s("u"),Condition(Times($p("v"),Power($p("g"),Plus($p("c",true),Times($p("d"),$s("x"))))),And(FreeQ(List($s("c"),$s("d"),$s("g")),$s("x")),Less(NumericFactor($s("d")),C0)))),Greater(NumericFactor($s("b")),C0)),CompoundExpression(Set($s("a"),Times(CN1,$s("a"))),Set($s("b"),Times(CN1,$s("b")))))),List(FunctionOfExponentialOfLinearSubst($s("u"),$s("a"),$s("b"),$s("f"),$s("x")),$s("a"),$s("b"),$s("f")))))),
SetDelayed(FunctionOfExponentialOfLinear($p("u"),$p("x"),$p("a"),$p("b"),$p("f")),
    If(FreeQ($s("u"),$s("x")),List($s("a"),$s("b"),$s("f")),If(Or(SameQ($s("u"),$s("x")),CalculusQ($s("u"))),False,If(And(And(PowerQ($s("u")),FreeQ(Part($s("u"),C1),$s("x"))),LinearQ(Part($s("u"),C2),$s("x"))),FunctionOfExponentialOfLinearAux($s("a"),$s("b"),$s("f"),Coefficient(Part($s("u"),C2),$s("x"),C0),Coefficient(Part($s("u"),C2),$s("x"),C1),Part($s("u"),C1)),If(And(HyperbolicQ($s("u")),LinearQ(Part($s("u"),C1),$s("x"))),FunctionOfExponentialOfLinearAux($s("a"),$s("b"),$s("f"),Coefficient(Part($s("u"),C1),$s("x"),C0),Coefficient(Part($s("u"),C1),$s("x"),C1),E),Module(List($s("lst")),If(And(And(PowerQ($s("u")),FreeQ(Part($s("u"),C1),$s("x"))),SumQ(Part($s("u"),C2))),CompoundExpression(Set($s("lst"),FunctionOfExponentialOfLinear(Power(Part($s("u"),C1),First(Part($s("u"),C2))),$s("x"),$s("a"),$s("b"),$s("f"))),If(SameQ($s("lst"),False),False,FunctionOfExponentialOfLinear(Power(Part($s("u"),C1),Rest(Part($s("u"),C2))),$s("x"),Part($s("lst"),C1),Part($s("lst"),C2),Part($s("lst"),C3)))),CompoundExpression(Set($s("lst"),List($s("a"),$s("b"),$s("f"))),Catch(CompoundExpression(Scan(Function(CompoundExpression(Set($s("lst"),FunctionOfExponentialOfLinear(Slot1,$s("x"),Part($s("lst"),C1),Part($s("lst"),C2),Part($s("lst"),C3))),If(SameQ($s("lst"),False),Throw(False)))),$s("u")),$s("lst"))))))))))),
SetDelayed(FunctionOfExponentialOfLinearAux($p("a"),$p("b"),$p("f"),$p("c"),$p("d"),$p("g")),
    If(FalseQ($s("a")),List($s("c"),$s("d"),$s("g")),If(ZeroQ(Plus(Times(Log($s("f")),NonnumericFactors($s("b"))),Times(CN1,Times(Log($s("g")),NonnumericFactors($s("d")))))),Module(List(Set($s("gcd"),GCD(NumericFactor($s("b")),NumericFactor($s("d"))))),CompoundExpression(If(And(Less(NumericFactor($s("b")),C0),Less(NumericFactor($s("d")),C0)),Set($s("gcd"),Times(CN1,$s("gcd")))),If(Equal($s("gcd"),NumericFactor($s("b"))),List($s("a"),$s("b"),$s("f")),If(Equal($s("gcd"),NumericFactor($s("d"))),List($s("c"),$s("d"),$s("g")),List(C0,Times($s("gcd"),NonnumericFactors($s("b"))),$s("f")))))),False))),
SetDelayed(FunctionOfExponentialOfLinearSubst($p("u"),$p("a"),$p("b"),$p("f"),$p("x")),
    If(FreeQ($s("u"),$s("x")),$s("u"),If(And(And(PowerQ($s("u")),FreeQ(Part($s("u"),C1),$s("x"))),LinearQ(Part($s("u"),C2),$s("x"))),Module(List($s("c"),$s("d"),$s("g")),CompoundExpression(CompoundExpression(CompoundExpression(Set($s("c"),Coefficient(Part($s("u"),C2),$s("x"),C0)),Set($s("d"),Coefficient(Part($s("u"),C2),$s("x"),C1))),Set($s("g"),Part($s("u"),C1))),Times(Power($s("g"),Plus($s("c"),Times(CN1,Times($s("a"),Times($s("d"),Power($s("b"),CN1)))))),Power($s("x"),Times($s("d"),Times(Log($s("g")),Power(Times($s("b"),Log($s("f"))),CN1))))))),If(And(HyperbolicQ($s("u")),LinearQ(Part($s("u"),C1),$s("x"))),Module(List($s("c"),$s("d"),$s("tmp")),CompoundExpression(CompoundExpression(CompoundExpression(Set($s("c"),Coefficient(Part($s("u"),C1),$s("x"),C0)),Set($s("d"),Coefficient(Part($s("u"),C1),$s("x"),C1))),Set($s("tmp"),Times(Power(E,Plus($s("c"),Times(CN1,Times($s("a"),Times($s("d"),Power($s("b"),CN1)))))),Power($s("x"),Times($s("d"),Power(Times($s("b"),Log($s("f"))),CN1)))))),If(SinhQ($s("u")),Plus(Times($s("tmp"),C1D2),Times(CN1,Times(C1,Power(Times(C2,$s("tmp")),CN1)))),If(CoshQ($s("u")),Plus(Times($s("tmp"),C1D2),Times(C1,Power(Times(C2,$s("tmp")),CN1))),If(TanhQ($s("u")),Times(Plus($s("tmp"),Times(CN1,Times(C1,Power($s("tmp"),CN1)))),Power(Plus($s("tmp"),Times(C1,Power($s("tmp"),CN1))),CN1)),If(CothQ($s("u")),Times(Plus($s("tmp"),Times(C1,Power($s("tmp"),CN1))),Power(Plus($s("tmp"),Times(CN1,Times(C1,Power($s("tmp"),CN1)))),CN1)),If(SechQ($s("u")),Times(C2,Power(Plus($s("tmp"),Times(C1,Power($s("tmp"),CN1))),CN1)),Times(C2,Power(Plus($s("tmp"),Times(CN1,Times(C1,Power($s("tmp"),CN1)))),CN1))))))))),If(And(And(PowerQ($s("u")),FreeQ(Part($s("u"),C1),$s("x"))),SumQ(Part($s("u"),C2))),Times(FunctionOfExponentialOfLinearSubst(Power(Part($s("u"),C1),First(Part($s("u"),C2))),$s("a"),$s("b"),$s("f"),$s("x")),FunctionOfExponentialOfLinearSubst(Power(Part($s("u"),C1),Rest(Part($s("u"),C2))),$s("a"),$s("b"),$s("f"),$s("x"))),Map(Function(FunctionOfExponentialOfLinearSubst(Slot1,$s("a"),$s("b"),$s("f"),$s("x"))),$s("u"))))))),
SetDelayed(FunctionOfTrig($p("u"),$p("x",$s("Symbol"))),
    Module(List(Set($s("v"),FunctionOfTrig($s("u"),$s("Null"),$s("x")))),If(SameQ($s("v"),$s("Null")),False,$s("v")))),
SetDelayed(FunctionOfTrig($p("u"),$p("v"),$p("x")),
    If(AtomQ($s("u")),If(SameQ($s("u"),$s("x")),False,$s("v")),If(And(TrigQ($s("u")),LinearQ(Part($s("u"),C1),$s("x"))),If(SameQ($s("v"),$s("Null")),Part($s("u"),C1),Module(List(Set($s("a"),Coefficient($s("v"),$s("x"),C0)),Set($s("b"),Coefficient($s("v"),$s("x"),C1)),Set($s("c"),Coefficient(Part($s("u"),C1),$s("x"),C0)),Set($s("d"),Coefficient(Part($s("u"),C1),$s("x"),C1))),If(And(ZeroQ(Plus(Times($s("a"),$s("d")),Times(CN1,Times($s("b"),$s("c"))))),RationalQ(Times($s("b"),Power($s("d"),CN1)))),Plus(Times($s("a"),Power(Numerator(Times($s("b"),Power($s("d"),CN1))),CN1)),Times($s("b"),Times($s("x"),Power(Numerator(Times($s("b"),Power($s("d"),CN1))),CN1)))),False))),If(CalculusQ($s("u")),False,Module(List(Set($s("w"),$s("v"))),Catch(CompoundExpression(Scan(Function(If(FalseQ(Set($s("w"),FunctionOfTrig(Slot1,$s("w"),$s("x")))),Throw(False))),$s("u")),$s("w")))))))),
SetDelayed(FunctionOfHyperbolic($p("u"),$p("x",$s("Symbol"))),
    Module(List(Set($s("v"),FunctionOfHyperbolic($s("u"),$s("Null"),$s("x")))),If(SameQ($s("v"),$s("Null")),False,$s("v")))),
SetDelayed(FunctionOfHyperbolic($p("u"),$p("v"),$p("x")),
    If(AtomQ($s("u")),If(SameQ($s("u"),$s("x")),False,$s("v")),If(And(HyperbolicQ($s("u")),LinearQ(Part($s("u"),C1),$s("x"))),If(SameQ($s("v"),$s("Null")),Part($s("u"),C1),Module(List(Set($s("a"),Coefficient($s("v"),$s("x"),C0)),Set($s("b"),Coefficient($s("v"),$s("x"),C1)),Set($s("c"),Coefficient(Part($s("u"),C1),$s("x"),C0)),Set($s("d"),Coefficient(Part($s("u"),C1),$s("x"),C1))),If(And(ZeroQ(Plus(Times($s("a"),$s("d")),Times(CN1,Times($s("b"),$s("c"))))),RationalQ(Times($s("b"),Power($s("d"),CN1)))),Plus(Times($s("a"),Power(Numerator(Times($s("b"),Power($s("d"),CN1))),CN1)),Times($s("b"),Times($s("x"),Power(Numerator(Times($s("b"),Power($s("d"),CN1))),CN1)))),False))),If(CalculusQ($s("u")),False,Module(List(Set($s("w"),$s("v"))),Catch(CompoundExpression(Scan(Function(If(FalseQ(Set($s("w"),FunctionOfHyperbolic(Slot1,$s("w"),$s("x")))),Throw(False))),$s("u")),$s("w")))))))),
SetDelayed(FunctionOfQ($p("v"),$p("u"),$p("x",$s("Symbol")),$p("PureFlag")),
    If(FreeQ($s("u"),$s("x")),False,If(AtomQ($s("v")),True,If(And(PowerQ($s("v")),FreeQ(Part($s("v"),C2),$s("x"))),FunctionOfPowerQ($s("u"),Part($s("v"),C1),Part($s("v"),C2),$s("x")),If($s("PureFlag"),If(Or(SinQ($s("v")),CscQ($s("v"))),PureFunctionOfSinQ($s("u"),Part($s("v"),C1),$s("x")),If(Or(CosQ($s("v")),SecQ($s("v"))),PureFunctionOfCosQ($s("u"),Part($s("v"),C1),$s("x")),If(TanQ($s("v")),PureFunctionOfTanQ($s("u"),Part($s("v"),C1),$s("x")),If(CotQ($s("v")),PureFunctionOfCotQ($s("u"),Part($s("v"),C1),$s("x")),If(Or(SinhQ($s("v")),CschQ($s("v"))),PureFunctionOfSinhQ($s("u"),Part($s("v"),C1),$s("x")),If(Or(CoshQ($s("v")),SechQ($s("v"))),PureFunctionOfCoshQ($s("u"),Part($s("v"),C1),$s("x")),If(TanhQ($s("v")),PureFunctionOfTanhQ($s("u"),Part($s("v"),C1),$s("x")),If(CothQ($s("v")),PureFunctionOfCothQ($s("u"),Part($s("v"),C1),$s("x")),FunctionOfExpnQ($s("u"),$s("v"),$s("x")))))))))),If(Or(SinQ($s("v")),CscQ($s("v"))),FunctionOfSinQ($s("u"),Part($s("v"),C1),$s("x")),If(Or(CosQ($s("v")),SecQ($s("v"))),FunctionOfCosQ($s("u"),Part($s("v"),C1),$s("x")),If(Or(TanQ($s("v")),CotQ($s("v"))),FunctionOfTanQ($s("u"),Part($s("v"),C1),$s("x")),If(Or(SinhQ($s("v")),CschQ($s("v"))),FunctionOfSinhQ($s("u"),Part($s("v"),C1),$s("x")),If(Or(CoshQ($s("v")),SechQ($s("v"))),FunctionOfCoshQ($s("u"),Part($s("v"),C1),$s("x")),If(Or(TanhQ($s("v")),CothQ($s("v"))),FunctionOfTanhQ($s("u"),Part($s("v"),C1),$s("x")),FunctionOfExpnQ($s("u"),$s("v"),$s("x"))))))))))))),
SetDelayed(FunctionOfExpnQ($p("u"),$p("v"),$p("x")),
    If(SameQ($s("u"),$s("v")),True,If(AtomQ($s("u")),UnsameQ($s("u"),$s("x")),If(CalculusQ($s("u")),False,Catch(CompoundExpression(Scan(Function(If(FunctionOfExpnQ(Slot1,$s("v"),$s("x")),$s("Null"),Throw(False))),$s("u")),True)))))),
SetDelayed(FunctionOfPowerQ($p("u"),$p("bas"),$p("deg"),$p("x")),
    If(AtomQ($s("u")),UnsameQ($s("u"),$s("x")),If(CalculusQ($s("u")),False,If(And(And(PowerQ($s("u")),ZeroQ(Plus(Part($s("u"),C1),Times(CN1,$s("bas"))))),FreeQ(Part($s("u"),C2),$s("x"))),If(RationalQ($s("deg")),If(RationalQ(Part($s("u"),C2)),And(IntegerQ(Times(Part($s("u"),C2),Power($s("deg"),CN1))),Or(Greater($s("deg"),C0),Less(Part($s("u"),C2),C0))),False),IntegerQ(Simplify(Times(Part($s("u"),C2),Power($s("deg"),CN1))))),Catch(CompoundExpression(Scan(Function(If(FunctionOfPowerQ(Slot1,$s("bas"),$s("deg"),$s("x")),$s("Null"),Throw(False))),$s("u")),True)))))),
SetDelayed(FindTrigFactor($p("func1"),$p("func2"),$p("u"),$p("v"),$p("flag")),
    If(SameQ($s("u"),C1),False,If(And(And(And(Or(SameQ(Head(LeadBase($s("u"))),$s("func1")),SameQ(Head(LeadBase($s("u"))),$s("func2"))),OddQ(LeadDegree($s("u")))),IntegerQuotientQ(Part(LeadBase($s("u")),C1),$s("v"))),Or($s("flag"),NonzeroQ(Plus(Part(LeadBase($s("u")),C1),Times(CN1,$s("v")))))),List(Part(LeadBase($s("u")),C1),RemainingFactors($s("u"))),Module(List(Set($s("lst"),FindTrigFactor($s("func1"),$s("func2"),RemainingFactors($s("u")),$s("v"),$s("flag")))),If(FalseQ($s("lst")),False,List(Part($s("lst"),C1),Times(LeadFactor($s("u")),Part($s("lst"),C2)))))))),
SetDelayed(PureFunctionOfSinQ($p("u"),$p("v"),$p("x")),
    If(AtomQ($s("u")),UnsameQ($s("u"),$s("x")),If(CalculusQ($s("u")),False,If(And(TrigQ($s("u")),ZeroQ(Plus(Part($s("u"),C1),Times(CN1,$s("v"))))),Or(SinQ($s("u")),CscQ($s("u"))),Catch(CompoundExpression(Scan(Function(If(Not(PureFunctionOfSinQ(Slot1,$s("v"),$s("x"))),Throw(False))),$s("u")),True)))))),
SetDelayed(PureFunctionOfCosQ($p("u"),$p("v"),$p("x")),
    If(AtomQ($s("u")),UnsameQ($s("u"),$s("x")),If(CalculusQ($s("u")),False,If(And(TrigQ($s("u")),ZeroQ(Plus(Part($s("u"),C1),Times(CN1,$s("v"))))),Or(CosQ($s("u")),SecQ($s("u"))),Catch(CompoundExpression(Scan(Function(If(Not(PureFunctionOfCosQ(Slot1,$s("v"),$s("x"))),Throw(False))),$s("u")),True)))))),
SetDelayed(PureFunctionOfTanQ($p("u"),$p("v"),$p("x")),
    If(AtomQ($s("u")),UnsameQ($s("u"),$s("x")),If(CalculusQ($s("u")),False,If(And(TrigQ($s("u")),ZeroQ(Plus(Part($s("u"),C1),Times(CN1,$s("v"))))),Or(TanQ($s("u")),CotQ($s("u"))),Catch(CompoundExpression(Scan(Function(If(Not(PureFunctionOfTanQ(Slot1,$s("v"),$s("x"))),Throw(False))),$s("u")),True)))))),
SetDelayed(PureFunctionOfCotQ($p("u"),$p("v"),$p("x")),
    If(AtomQ($s("u")),UnsameQ($s("u"),$s("x")),If(CalculusQ($s("u")),False,If(And(TrigQ($s("u")),ZeroQ(Plus(Part($s("u"),C1),Times(CN1,$s("v"))))),CotQ($s("u")),Catch(CompoundExpression(Scan(Function(If(Not(PureFunctionOfCotQ(Slot1,$s("v"),$s("x"))),Throw(False))),$s("u")),True)))))),
SetDelayed(FunctionOfSinQ($p("u"),$p("v"),$p("x")),
    If(AtomQ($s("u")),UnsameQ($s("u"),$s("x")),If(CalculusQ($s("u")),False,If(And(TrigQ($s("u")),IntegerQuotientQ(Part($s("u"),C1),$s("v"))),If(OddQuotientQ(Part($s("u"),C1),$s("v")),Or(SinQ($s("u")),CscQ($s("u"))),Or(CosQ($s("u")),SecQ($s("u")))),If(And(And(IntegerPowerQ($s("u")),TrigQ(Part($s("u"),C1))),IntegerQuotientQ(Part(Part($s("u"),C1),C1),$s("v"))),If(EvenQ(Part($s("u"),C2)),True,FunctionOfSinQ(Part($s("u"),C1),$s("v"),$s("x"))),If(ProductQ($s("u")),If(And(And(And(CosQ(Part($s("u"),C1)),SinQ(Part($s("u"),C2))),ZeroQ(Plus(Part(Part($s("u"),C1),C1),Times(CN1,Times($s("v"),C1D2))))),ZeroQ(Plus(Part(Part($s("u"),C2),C1),Times(CN1,Times($s("v"),C1D2))))),FunctionOfSinQ(Drop($s("u"),C2),$s("v"),$s("x")),Module(List($s("lst")),CompoundExpression(Set($s("lst"),FindTrigFactor($s("Sin"),$s("Csc"),$s("u"),$s("v"),False)),If(And(NotFalseQ($s("lst")),EvenQuotientQ(Part($s("lst"),C1),$s("v"))),FunctionOfSinQ(Times(Cos($s("v")),Part($s("lst"),C2)),$s("v"),$s("x")),CompoundExpression(Set($s("lst"),FindTrigFactor($s("Cos"),$s("Sec"),$s("u"),$s("v"),False)),If(And(NotFalseQ($s("lst")),OddQuotientQ(Part($s("lst"),C1),$s("v"))),FunctionOfSinQ(Times(Cos($s("v")),Part($s("lst"),C2)),$s("v"),$s("x")),CompoundExpression(Set($s("lst"),FindTrigFactor($s("Tan"),$s("Cot"),$s("u"),$s("v"),True)),If(NotFalseQ($s("lst")),FunctionOfSinQ(Times(Cos($s("v")),Part($s("lst"),C2)),$s("v"),$s("x")),Catch(CompoundExpression(Scan(Function(If(Not(FunctionOfSinQ(Slot1,$s("v"),$s("x"))),Throw(False))),$s("u")),True)))))))))),Catch(CompoundExpression(Scan(Function(If(Not(FunctionOfSinQ(Slot1,$s("v"),$s("x"))),Throw(False))),$s("u")),True)))))))),
SetDelayed(FunctionOfCosQ($p("u"),$p("v"),$p("x")),
    If(AtomQ($s("u")),UnsameQ($s("u"),$s("x")),If(CalculusQ($s("u")),False,If(And(TrigQ($s("u")),IntegerQuotientQ(Part($s("u"),C1),$s("v"))),Or(CosQ($s("u")),SecQ($s("u"))),If(And(And(IntegerPowerQ($s("u")),TrigQ(Part($s("u"),C1))),IntegerQuotientQ(Part(Part($s("u"),C1),C1),$s("v"))),If(EvenQ(Part($s("u"),C2)),True,FunctionOfCosQ(Part($s("u"),C1),$s("v"),$s("x"))),If(ProductQ($s("u")),Module(List($s("lst")),CompoundExpression(Set($s("lst"),FindTrigFactor($s("Sin"),$s("Csc"),$s("u"),$s("v"),False)),If(NotFalseQ($s("lst")),FunctionOfCosQ(Times(Sin($s("v")),Part($s("lst"),C2)),$s("v"),$s("x")),CompoundExpression(Set($s("lst"),FindTrigFactor($s("Tan"),$s("Cot"),$s("u"),$s("v"),True)),If(NotFalseQ($s("lst")),FunctionOfCosQ(Times(Sin($s("v")),Part($s("lst"),C2)),$s("v"),$s("x")),Catch(CompoundExpression(Scan(Function(If(Not(FunctionOfCosQ(Slot1,$s("v"),$s("x"))),Throw(False))),$s("u")),True))))))),Catch(CompoundExpression(Scan(Function(If(Not(FunctionOfCosQ(Slot1,$s("v"),$s("x"))),Throw(False))),$s("u")),True)))))))),
SetDelayed(FunctionOfTanQ($p("u"),$p("v"),$p("x")),
    If(AtomQ($s("u")),UnsameQ($s("u"),$s("x")),If(CalculusQ($s("u")),False,If(And(TrigQ($s("u")),IntegerQuotientQ(Part($s("u"),C1),$s("v"))),Or(Or(TanQ($s("u")),CotQ($s("u"))),EvenQuotientQ(Part($s("u"),C1),$s("v"))),If(And(And(And(PowerQ($s("u")),EvenQ(Part($s("u"),C2))),TrigQ(Part($s("u"),C1))),IntegerQuotientQ(Part(Part($s("u"),C1),C1),$s("v"))),True,If(ProductQ($s("u")),Module(List(Set($s("lst"),ReapList(Scan(Function(If(Not(FunctionOfTanQ(Slot1,$s("v"),$s("x"))),Sow(Slot1))),$s("u"))))),If(SameQ($s("lst"),List()),True,And(And(Equal(Length($s("lst")),C2),OddTrigPowerQ(Part($s("lst"),C1),$s("v"),$s("x"))),OddTrigPowerQ(Part($s("lst"),C2),$s("v"),$s("x"))))),Catch(CompoundExpression(Scan(Function(If(Not(FunctionOfTanQ(Slot1,$s("v"),$s("x"))),Throw(False))),$s("u")),True)))))))),
SetDelayed(OddTrigPowerQ($p("u"),$p("v"),$p("x")),
    If(Or(Or(Or(SinQ($s("u")),CosQ($s("u"))),SecQ($s("u"))),CscQ($s("u"))),OddQuotientQ(Part($s("u"),C1),$s("v")),If(PowerQ($s("u")),And(OddQ(Part($s("u"),C2)),OddTrigPowerQ(Part($s("u"),C1),$s("v"),$s("x"))),If(ProductQ($s("u")),Module(List(Set($s("lst"),ReapList(Scan(Function(If(Not(FunctionOfTanQ(Slot1,$s("v"),$s("x"))),Sow(Slot1))),$s("u"))))),If(SameQ($s("lst"),List()),True,And(Equal(Length($s("lst")),C1),OddTrigPowerQ(Part($s("lst"),C1),$s("v"),$s("x"))))),False)))),
SetDelayed(FunctionOfTanWeight($p("u"),$p("v"),$p("x")),
    If(AtomQ($s("u")),C0,If(CalculusQ($s("u")),C0,If(And(TrigQ($s("u")),IntegerQuotientQ(Part($s("u"),C1),$s("v"))),If(And(TanQ($s("u")),ZeroQ(Plus(Part($s("u"),C1),Times(CN1,$s("v"))))),C1,If(And(CotQ($s("u")),ZeroQ(Plus(Part($s("u"),C1),Times(CN1,$s("v"))))),CN1,C0)),If(And(And(And(PowerQ($s("u")),EvenQ(Part($s("u"),C2))),TrigQ(Part($s("u"),C1))),IntegerQuotientQ(Part(Part($s("u"),C1),C1),$s("v"))),If(Or(Or(TanQ(Part($s("u"),C1)),CosQ(Part($s("u"),C1))),SecQ(Part($s("u"),C1))),C1,CN1),If(ProductQ($s("u")),If(Catch(CompoundExpression(Scan(Function(If(Not(FunctionOfTanQ(Slot1,$s("v"),$s("x"))),Throw(False))),$s("u")),True)),Apply($s("Plus"),Map(Function(FunctionOfTanWeight(Slot1,$s("v"),$s("x"))),Apply($s("List"),$s("u")))),C0),Apply($s("Plus"),Map(Function(FunctionOfTanWeight(Slot1,$s("v"),$s("x"))),Apply($s("List"),$s("u")))))))))),
SetDelayed(FunctionOfTrigQ($p("u"),$p("v"),$p("x",$s("Symbol"))),
    If(AtomQ($s("u")),UnsameQ($s("u"),$s("x")),If(CalculusQ($s("u")),False,If(And(TrigQ($s("u")),IntegerQuotientQ(Part($s("u"),C1),$s("v"))),True,Catch(CompoundExpression(Scan(Function(If(Not(FunctionOfTrigQ(Slot1,$s("v"),$s("x"))),Throw(False))),$s("u")),True)))))),
SetDelayed(PureFunctionOfSinhQ($p("u"),$p("v"),$p("x")),
    If(AtomQ($s("u")),UnsameQ($s("u"),$s("x")),If(CalculusQ($s("u")),False,If(And(HyperbolicQ($s("u")),ZeroQ(Plus(Part($s("u"),C1),Times(CN1,$s("v"))))),Or(SinhQ($s("u")),CschQ($s("u"))),Catch(CompoundExpression(Scan(Function(If(Not(PureFunctionOfSinhQ(Slot1,$s("v"),$s("x"))),Throw(False))),$s("u")),True)))))),
SetDelayed(PureFunctionOfCoshQ($p("u"),$p("v"),$p("x")),
    If(AtomQ($s("u")),UnsameQ($s("u"),$s("x")),If(CalculusQ($s("u")),False,If(And(HyperbolicQ($s("u")),ZeroQ(Plus(Part($s("u"),C1),Times(CN1,$s("v"))))),Or(CoshQ($s("u")),SechQ($s("u"))),Catch(CompoundExpression(Scan(Function(If(Not(PureFunctionOfCoshQ(Slot1,$s("v"),$s("x"))),Throw(False))),$s("u")),True)))))),
SetDelayed(PureFunctionOfTanhQ($p("u"),$p("v"),$p("x")),
    If(AtomQ($s("u")),UnsameQ($s("u"),$s("x")),If(CalculusQ($s("u")),False,If(And(HyperbolicQ($s("u")),ZeroQ(Plus(Part($s("u"),C1),Times(CN1,$s("v"))))),Or(TanhQ($s("u")),CothQ($s("u"))),Catch(CompoundExpression(Scan(Function(If(Not(PureFunctionOfTanhQ(Slot1,$s("v"),$s("x"))),Throw(False))),$s("u")),True)))))),
SetDelayed(PureFunctionOfCothQ($p("u"),$p("v"),$p("x")),
    If(AtomQ($s("u")),UnsameQ($s("u"),$s("x")),If(CalculusQ($s("u")),False,If(And(HyperbolicQ($s("u")),ZeroQ(Plus(Part($s("u"),C1),Times(CN1,$s("v"))))),CothQ($s("u")),Catch(CompoundExpression(Scan(Function(If(Not(PureFunctionOfCothQ(Slot1,$s("v"),$s("x"))),Throw(False))),$s("u")),True)))))),
SetDelayed(FunctionOfSinhQ($p("u"),$p("v"),$p("x")),
    If(AtomQ($s("u")),UnsameQ($s("u"),$s("x")),If(CalculusQ($s("u")),False,If(And(HyperbolicQ($s("u")),IntegerQuotientQ(Part($s("u"),C1),$s("v"))),If(OddQuotientQ(Part($s("u"),C1),$s("v")),Or(SinhQ($s("u")),CschQ($s("u"))),Or(CoshQ($s("u")),SechQ($s("u")))),If(And(And(IntegerPowerQ($s("u")),HyperbolicQ(Part($s("u"),C1))),IntegerQuotientQ(Part(Part($s("u"),C1),C1),$s("v"))),If(EvenQ(Part($s("u"),C2)),True,FunctionOfSinhQ(Part($s("u"),C1),$s("v"),$s("x"))),If(ProductQ($s("u")),If(And(And(And(CoshQ(Part($s("u"),C1)),SinhQ(Part($s("u"),C2))),ZeroQ(Plus(Part(Part($s("u"),C1),C1),Times(CN1,Times($s("v"),C1D2))))),ZeroQ(Plus(Part(Part($s("u"),C2),C1),Times(CN1,Times($s("v"),C1D2))))),FunctionOfSinhQ(Drop($s("u"),C2),$s("v"),$s("x")),Module(List($s("lst")),CompoundExpression(Set($s("lst"),FindTrigFactor($s("Sinh"),$s("Csch"),$s("u"),$s("v"),False)),If(And(NotFalseQ($s("lst")),EvenQuotientQ(Part($s("lst"),C1),$s("v"))),FunctionOfSinhQ(Times(Cosh($s("v")),Part($s("lst"),C2)),$s("v"),$s("x")),CompoundExpression(Set($s("lst"),FindTrigFactor($s("Cosh"),$s("Sech"),$s("u"),$s("v"),False)),If(And(NotFalseQ($s("lst")),OddQuotientQ(Part($s("lst"),C1),$s("v"))),FunctionOfSinhQ(Times(Cosh($s("v")),Part($s("lst"),C2)),$s("v"),$s("x")),CompoundExpression(Set($s("lst"),FindTrigFactor($s("Tanh"),$s("Coth"),$s("u"),$s("v"),True)),If(NotFalseQ($s("lst")),FunctionOfSinhQ(Times(Cosh($s("v")),Part($s("lst"),C2)),$s("v"),$s("x")),Catch(CompoundExpression(Scan(Function(If(Not(FunctionOfSinhQ(Slot1,$s("v"),$s("x"))),Throw(False))),$s("u")),True)))))))))),Catch(CompoundExpression(Scan(Function(If(Not(FunctionOfSinhQ(Slot1,$s("v"),$s("x"))),Throw(False))),$s("u")),True)))))))),
SetDelayed(FunctionOfCoshQ($p("u"),$p("v"),$p("x")),
    If(AtomQ($s("u")),UnsameQ($s("u"),$s("x")),If(CalculusQ($s("u")),False,If(And(HyperbolicQ($s("u")),IntegerQuotientQ(Part($s("u"),C1),$s("v"))),Or(CoshQ($s("u")),SechQ($s("u"))),If(And(And(IntegerPowerQ($s("u")),HyperbolicQ(Part($s("u"),C1))),IntegerQuotientQ(Part(Part($s("u"),C1),C1),$s("v"))),If(EvenQ(Part($s("u"),C2)),True,FunctionOfCoshQ(Part($s("u"),C1),$s("v"),$s("x"))),If(ProductQ($s("u")),Module(List($s("lst")),CompoundExpression(Set($s("lst"),FindTrigFactor($s("Sinh"),$s("Csch"),$s("u"),$s("v"),False)),If(NotFalseQ($s("lst")),FunctionOfCoshQ(Times(Sinh($s("v")),Part($s("lst"),C2)),$s("v"),$s("x")),CompoundExpression(Set($s("lst"),FindTrigFactor($s("Tanh"),$s("Coth"),$s("u"),$s("v"),True)),If(NotFalseQ($s("lst")),FunctionOfCoshQ(Times(Sinh($s("v")),Part($s("lst"),C2)),$s("v"),$s("x")),Catch(CompoundExpression(Scan(Function(If(Not(FunctionOfCoshQ(Slot1,$s("v"),$s("x"))),Throw(False))),$s("u")),True))))))),Catch(CompoundExpression(Scan(Function(If(Not(FunctionOfCoshQ(Slot1,$s("v"),$s("x"))),Throw(False))),$s("u")),True)))))))),
SetDelayed(FunctionOfTanhQ($p("u"),$p("v"),$p("x")),
    If(AtomQ($s("u")),UnsameQ($s("u"),$s("x")),If(CalculusQ($s("u")),False,If(And(HyperbolicQ($s("u")),IntegerQuotientQ(Part($s("u"),C1),$s("v"))),Or(Or(TanhQ($s("u")),CothQ($s("u"))),EvenQuotientQ(Part($s("u"),C1),$s("v"))),If(And(And(And(PowerQ($s("u")),EvenQ(Part($s("u"),C2))),HyperbolicQ(Part($s("u"),C1))),IntegerQuotientQ(Part(Part($s("u"),C1),C1),$s("v"))),True,If(ProductQ($s("u")),Module(List(Set($s("lst"),ReapList(Scan(Function(If(Not(FunctionOfTanhQ(Slot1,$s("v"),$s("x"))),Sow(Slot1))),$s("u"))))),If(SameQ($s("lst"),List()),True,And(And(Equal(Length($s("lst")),C2),OddHyperbolicPowerQ(Part($s("lst"),C1),$s("v"),$s("x"))),OddHyperbolicPowerQ(Part($s("lst"),C2),$s("v"),$s("x"))))),Catch(CompoundExpression(Scan(Function(If(Not(FunctionOfTanhQ(Slot1,$s("v"),$s("x"))),Throw(False))),$s("u")),True)))))))),
SetDelayed(OddHyperbolicPowerQ($p("u"),$p("v"),$p("x")),
    If(Or(Or(Or(SinhQ($s("u")),CoshQ($s("u"))),SechQ($s("u"))),CschQ($s("u"))),OddQuotientQ(Part($s("u"),C1),$s("v")),If(PowerQ($s("u")),And(OddQ(Part($s("u"),C2)),OddHyperbolicPowerQ(Part($s("u"),C1),$s("v"),$s("x"))),If(ProductQ($s("u")),Module(List(Set($s("lst"),ReapList(Scan(Function(If(Not(FunctionOfTanhQ(Slot1,$s("v"),$s("x"))),Sow(Slot1))),$s("u"))))),If(SameQ($s("lst"),List()),True,And(Equal(Length($s("lst")),C1),OddHyperbolicPowerQ(Part($s("lst"),C1),$s("v"),$s("x"))))),False)))),
SetDelayed(FunctionOfTanhWeight($p("u"),$p("v"),$p("x")),
    If(AtomQ($s("u")),C0,If(CalculusQ($s("u")),C0,If(And(HyperbolicQ($s("u")),IntegerQuotientQ(Part($s("u"),C1),$s("v"))),If(And(TanhQ($s("u")),ZeroQ(Plus(Part($s("u"),C1),Times(CN1,$s("v"))))),C1,If(And(CothQ($s("u")),ZeroQ(Plus(Part($s("u"),C1),Times(CN1,$s("v"))))),CN1,C0)),If(And(And(And(PowerQ($s("u")),EvenQ(Part($s("u"),C2))),HyperbolicQ(Part($s("u"),C1))),IntegerQuotientQ(Part(Part($s("u"),C1),C1),$s("v"))),If(Or(Or(TanhQ(Part($s("u"),C1)),CoshQ(Part($s("u"),C1))),SechQ(Part($s("u"),C1))),C1,CN1),If(ProductQ($s("u")),If(Catch(CompoundExpression(Scan(Function(If(Not(FunctionOfTanhQ(Slot1,$s("v"),$s("x"))),Throw(False))),$s("u")),True)),Apply($s("Plus"),Map(Function(FunctionOfTanhWeight(Slot1,$s("v"),$s("x"))),Apply($s("List"),$s("u")))),C0),Apply($s("Plus"),Map(Function(FunctionOfTanhWeight(Slot1,$s("v"),$s("x"))),Apply($s("List"),$s("u")))))))))),
SetDelayed(FunctionOfHyperbolicQ($p("u"),$p("v"),$p("x",$s("Symbol"))),
    If(AtomQ($s("u")),UnsameQ($s("u"),$s("x")),If(CalculusQ($s("u")),False,If(And(HyperbolicQ($s("u")),IntegerQuotientQ(Part($s("u"),C1),$s("v"))),True,Catch(CompoundExpression(Scan(Function(If(FunctionOfHyperbolicQ(Slot1,$s("v"),$s("x")),$s("Null"),Throw(False))),$s("u")),True)))))),
SetDelayed(IntegerQuotientQ($p("u"),$p("v")),
    Or(Or(SameQ($s("u"),$s("v")),ZeroQ(Plus($s("u"),Times(CN1,$s("v"))))),IntegerQ(Times($s("u"),Power($s("v"),CN1))))),
SetDelayed(OddQuotientQ($p("u"),$p("v")),
    Or(Or(SameQ($s("u"),$s("v")),ZeroQ(Plus($s("u"),Times(CN1,$s("v"))))),OddQ(Times($s("u"),Power($s("v"),CN1))))),
SetDelayed(EvenQuotientQ($p("u"),$p("v")),
    EvenQ(Times($s("u"),Power($s("v"),CN1)))),
SetDelayed(FunctionOfDensePolynomialsQ($p("u"),$p("x",$s("Symbol"))),
    If(FreeQ($s("u"),$s("x")),True,If(PolynomialQ($s("u"),$s("x")),Greater(Length(Exponent($s("u"),$s("x"),$s("List"))),C1),Catch(CompoundExpression(Scan(Function(If(FunctionOfDensePolynomialsQ(Slot1,$s("x")),$s("Null"),Throw(False))),$s("u")),True))))),
SetDelayed(FunctionOfLog($p("u"),$p("x",$s("Symbol"))),
    Module(List(Set($s("lst"),FunctionOfLog($s("u"),False,False,$s("x")))),If(Or(FalseQ($s("lst")),FalseQ(Part($s("lst"),C2))),False,$s("lst")))),
SetDelayed(FunctionOfLog($p("u"),$p("v"),$p("n"),$p("x")),
    If(AtomQ($s("u")),If(SameQ($s("u"),$s("x")),False,List($s("u"),$s("v"),$s("n"))),If(CalculusQ($s("u")),False,Module(List($s("lst")),If(And(And(LogQ($s("u")),NotFalseQ(Set($s("lst"),BinomialTest(Part($s("u"),C1),$s("x"))))),ZeroQ(Part($s("lst"),C1))),If(Or(FalseQ($s("v")),SameQ(Part($s("u"),C1),$s("v"))),List($s("x"),Part($s("u"),C1),Part($s("lst"),C3)),False),CompoundExpression(Set($s("lst"),List(C0,$s("v"),$s("n"))),Catch(List(Map(Function(CompoundExpression(Set($s("lst"),FunctionOfLog(Slot1,Part($s("lst"),C2),Part($s("lst"),C3),$s("x"))),If(SameQ($s("lst"),False),Throw(False),Part($s("lst"),C1)))),$s("u")),Part($s("lst"),C2),Part($s("lst"),C3))))))))),
SetDelayed(FunctionOfProductLog($p("u"),$p("x",$s("Symbol"))),
    Module(List(Set($s("lst"),FunctionOfProductLog($s("u"),False,False,$s("x")))),If(Or(FalseQ($s("lst")),FalseQ(Part($s("lst"),C2))),False,$s("lst")))),
SetDelayed(FunctionOfProductLog($p("u"),$p("v"),$p("n"),$p("x")),
    If(AtomQ($s("u")),If(SameQ($s("u"),$s("x")),False,List($s("u"),$s("v"),$s("n"))),If(CalculusQ($s("u")),False,Module(List($s("lst")),If(And(And(ProductLogQ($s("u")),NotFalseQ(Set($s("lst"),BinomialTest(Part($s("u"),C1),$s("x"))))),ZeroQ(Part($s("lst"),C1))),If(Or(FalseQ($s("v")),SameQ(Part($s("u"),C1),$s("v"))),List($s("x"),Part($s("u"),C1),Part($s("lst"),C3)),False),CompoundExpression(Set($s("lst"),List(C0,$s("v"),$s("n"))),Catch(List(Map(Function(CompoundExpression(Set($s("lst"),FunctionOfProductLog(Slot1,Part($s("lst"),C2),Part($s("lst"),C3),$s("x"))),If(SameQ($s("lst"),False),Throw(False),Part($s("lst"),C1)))),$s("u")),Part($s("lst"),C2),Part($s("lst"),C3))))))))),
SetDelayed(PowerVariableExpn($p("u"),$p("m"),$p("x",$s("Symbol"))),
    If(IntegerQ($s("m")),Module(List(Set($s("lst"),PowerVariableDegree($s("u"),$s("m"),C1,$s("x")))),If(FalseQ($s("lst")),False,List(Times(Power($s("x"),Times($s("m"),Power(Part($s("lst"),C1),CN1))),PowerVariableSubst($s("u"),Part($s("lst"),C1),$s("x"))),Part($s("lst"),C1),Part($s("lst"),C2)))),False)),
SetDelayed(PowerVariableDegree($p("u"),$p("m"),$p("c"),$p("x",$s("Symbol"))),
    If(FreeQ($s("u"),$s("x")),List($s("m"),$s("c")),If(Or(AtomQ($s("u")),CalculusQ($s("u"))),False,If(And(PowerQ($s("u")),FreeQ(Times(Part($s("u"),C1),Power($s("x"),CN1)),$s("x"))),If(Or(ZeroQ($s("m")),And(SameQ($s("m"),Part($s("u"),C2)),SameQ($s("c"),Times(Part($s("u"),C1),Power($s("x"),CN1))))),List(Part($s("u"),C2),Times(Part($s("u"),C1),Power($s("x"),CN1))),If(And(And(And(IntegerQ(Part($s("u"),C2)),IntegerQ($s("m"))),Greater(GCD($s("m"),Part($s("u"),C2)),C1)),SameQ($s("c"),Times(Part($s("u"),C1),Power($s("x"),CN1)))),List(GCD($s("m"),Part($s("u"),C2)),$s("c")),False)),Catch(Module(List(Set($s("lst"),List($s("m"),$s("c")))),CompoundExpression(Scan(Function(CompoundExpression(Set($s("lst"),PowerVariableDegree(Slot1,Part($s("lst"),C1),Part($s("lst"),C2),$s("x"))),If(SameQ($s("lst"),False),Throw(False)))),$s("u")),$s("lst")))))))),
SetDelayed(PowerVariableSubst($p("u"),$p("m"),$p("x",$s("Symbol"))),
    If(Or(Or(FreeQ($s("u"),$s("x")),AtomQ($s("u"))),CalculusQ($s("u"))),$s("u"),If(And(PowerQ($s("u")),FreeQ(Times(Part($s("u"),C1),Power($s("x"),CN1)),$s("x"))),Power($s("x"),Times(Part($s("u"),C2),Power($s("m"),CN1))),Map(Function(PowerVariableSubst(Slot1,$s("m"),$s("x"))),$s("u"))))),
SetDelayed(FunctionOfSquareRootOfQuadratic($p("u"),$p("x",$s("Symbol"))),
    If(MatchQ($s("u"),Condition(Times(Power($s("x"),$p("m",true)),Power(Plus($p("a"),Times($p("b",true),Power($s("x"),$p("n",true)))),$p("p"))),FreeQ(List($s("a"),$s("b"),$s("m"),$s("n"),$s("p")),$s("x")))),False,Module(List(Set($s("tmp"),FunctionOfSquareRootOfQuadratic($s("u"),False,$s("x")))),If(Or(FalseQ($s("tmp")),FalseQ(Part($s("tmp"),C1))),False,CompoundExpression(Set($s("tmp"),Part($s("tmp"),C1)),Module(List(Set($s("a"),Coefficient($s("tmp"),$s("x"),C0)),Set($s("b"),Coefficient($s("tmp"),$s("x"),C1)),Set($s("c"),Coefficient($s("tmp"),$s("x"),C2)),$s("sqrt"),$s("q"),$s("r")),If(And(ZeroQ($s("a")),ZeroQ($s("b"))),False,If(PosQ($s("c")),CompoundExpression(CompoundExpression(CompoundExpression(Set($s("sqrt"),Rt($s("c"),C2)),Set($s("q"),Plus(Plus(Times($s("a"),$s("sqrt")),Times($s("b"),$s("x"))),Times($s("sqrt"),Power($s("x"),C2))))),Set($s("r"),Plus($s("b"),Times(Times(C2,$s("sqrt")),$s("x"))))),List(Simplify(Times(SquareRootOfQuadraticSubst($s("u"),Times($s("q"),Power($s("r"),CN1)),Times(Plus(Times(CN1,$s("a")),Power($s("x"),C2)),Power($s("r"),CN1)),$s("x")),Times($s("q"),Power(Power($s("r"),C2),CN1)))),Simplify(Plus(Times($s("sqrt"),$s("x")),Sqrt($s("tmp")))),C2)),If(PosQ($s("a")),CompoundExpression(CompoundExpression(CompoundExpression(Set($s("sqrt"),Rt($s("a"),C2)),Set($s("q"),Plus(Plus(Times($s("c"),$s("sqrt")),Times(CN1,Times($s("b"),$s("x")))),Times($s("sqrt"),Power($s("x"),C2))))),Set($s("r"),Plus($s("c"),Times(CN1,Power($s("x"),C2))))),List(Simplify(Times(SquareRootOfQuadraticSubst($s("u"),Times($s("q"),Power($s("r"),CN1)),Times(Plus(Times(CN1,$s("b")),Times(Times(C2,$s("sqrt")),$s("x"))),Power($s("r"),CN1)),$s("x")),Times($s("q"),Power(Power($s("r"),C2),CN1)))),Simplify(Times(Plus(Times(CN1,$s("sqrt")),Sqrt($s("tmp"))),Power($s("x"),CN1))),C1)),CompoundExpression(Set($s("sqrt"),Rt(Plus(Power($s("b"),C2),Times(CN1,Times(Times(C4,$s("a")),$s("c")))),C2)),If(ZeroQ($s("sqrt")),False,CompoundExpression(Set($s("r"),Plus($s("c"),Times(CN1,Power($s("x"),C2)))),List(Simplify(Times(Times(Times(CN1,$s("sqrt")),SquareRootOfQuadraticSubst($s("u"),Times(Times(CN1,$s("sqrt")),Times($s("x"),Power($s("r"),CN1))),Times(Times(CN1,Plus(Plus(Times($s("b"),$s("c")),Times($s("c"),$s("sqrt"))),Times(Plus(Times(CN1,$s("b")),$s("sqrt")),Power($s("x"),C2)))),Power(Times(Times(C2,$s("c")),$s("r")),CN1)),$s("x"))),Times($s("x"),Power(Power($s("r"),C2),CN1)))),FullSimplify(Times(Times(C2,$s("c")),Times(Sqrt($s("tmp")),Power(Plus(Plus($s("b"),Times(CN1,$s("sqrt"))),Times(Times(C2,$s("c")),$s("x"))),CN1)))),C3))))))))))))),
SetDelayed(FunctionOfSquareRootOfQuadratic($p("u"),$p("v"),$p("x",$s("Symbol"))),
    If(Or(AtomQ($s("u")),FreeQ($s("u"),$s("x"))),List($s("v")),If(And(PowerQ($s("u")),FreeQ(Part($s("u"),C2),$s("x"))),If(And(And(And(FractionQ(Part($s("u"),C2)),Equal(Denominator(Part($s("u"),C2)),C2)),PolynomialQ(Part($s("u"),C1),$s("x"))),Equal(Exponent(Part($s("u"),C1),$s("x")),C2)),If(Or(FalseQ($s("v")),SameQ(Part($s("u"),C1),$s("v"))),List(Part($s("u"),C1)),False),FunctionOfSquareRootOfQuadratic(Part($s("u"),C1),$s("v"),$s("x"))),If(Or(ProductQ($s("u")),SumQ($s("u"))),Catch(Module(List(Set($s("lst"),List($s("v")))),CompoundExpression(Scan(Function(CompoundExpression(Set($s("lst"),FunctionOfSquareRootOfQuadratic(Slot1,Part($s("lst"),C1),$s("x"))),If(SameQ($s("lst"),False),Throw(False)))),$s("u")),$s("lst")))),False)))),
SetDelayed(SquareRootOfQuadraticSubst($p("u"),$p("vv"),$p("xx"),$p("x",$s("Symbol"))),
    If(Or(AtomQ($s("u")),FreeQ($s("u"),$s("x"))),If(SameQ($s("u"),$s("x")),$s("xx"),$s("u")),If(And(PowerQ($s("u")),FreeQ(Part($s("u"),C2),$s("x"))),If(And(And(And(FractionQ(Part($s("u"),C2)),Equal(Denominator(Part($s("u"),C2)),C2)),PolynomialQ(Part($s("u"),C1),$s("x"))),Equal(Exponent(Part($s("u"),C1),$s("x")),C2)),Power($s("vv"),Numerator(Part($s("u"),C2))),Power(SquareRootOfQuadraticSubst(Part($s("u"),C1),$s("vv"),$s("xx"),$s("x")),Part($s("u"),C2))),Map(Function(SquareRootOfQuadraticSubst(Slot1,$s("vv"),$s("xx"),$s("x"))),$s("u"))))),
SetDelayed(RegularizeSubst($p("u"),$p("x"),$p("w")),
    Module(List(Set($s("lst"),ConstantFactor(Regularize(Subst($s("u"),$s("x"),$s("w")),$s("x")),$s("x")))),Times(Part($s("lst"),C1),Part($s("lst"),C2)))),
SetDelayed(Subst($p("u"),$p("v"),$p("w")),
    Condition(If(SameQ($s("u"),$s("v")),$s("w"),If(AtomQ($s("u")),$s("u"),If(PowerQ($s("u")),If(And(And(PowerQ($s("v")),SameQ(Part($s("u"),C1),Part($s("v"),C1))),SumQ(Part($s("u"),C2))),Times(Subst(Power(Part($s("u"),C1),First(Part($s("u"),C2))),$s("v"),$s("w")),Subst(Power(Part($s("u"),C1),Rest(Part($s("u"),C2))),$s("v"),$s("w"))),Power(Subst(Part($s("u"),C1),$s("v"),$s("w")),Subst(Part($s("u"),C2),$s("v"),$s("w")))),If(And(SubstQ($s("u")),Or(SameQ(Part($s("u"),C2),$s("v")),FreeQ(Part($s("u"),C1),$s("v")))),Subst(Part($s("u"),C1),Part($s("u"),C2),Subst(Part($s("u"),C3),$s("v"),$s("w"))),Map(Function(Subst(Slot1,$s("v"),$s("w"))),$s("u")))))),Or(Or(AtomQ($s("u")),And(SubstQ($s("u")),Or(SameQ(Part($s("u"),C2),$s("v")),FreeQ(Part($s("u"),C1),$s("v"))))),Not(Or(And(CalculusQ($s("u")),Not(FreeQ($s("v"),Part($s("u"),C2)))),MemberQ(List($s("Pattern"),$s("Defer"),$s("Hold"),$s("HoldForm")),Head($s("u")))))))),
SetDelayed(SubstFor($p("v"),$p("u"),$p("x")),
    If(AtomQ($s("v")),Subst($s("u"),$s("v"),$s("x")),If(And(PowerQ($s("v")),FreeQ(Part($s("v"),C2),$s("x"))),SubstForPower($s("u"),Part($s("v"),C1),Part($s("v"),C2),$s("x")),If(SinQ($s("v")),SubstForTrig($s("u"),$s("x"),Sqrt(Plus(C1,Times(CN1,Power($s("x"),C2)))),Part($s("v"),C1),$s("x")),If(CosQ($s("v")),SubstForTrig($s("u"),Sqrt(Plus(C1,Times(CN1,Power($s("x"),C2)))),$s("x"),Part($s("v"),C1),$s("x")),If(TanQ($s("v")),SubstForTrig($s("u"),Times($s("x"),Power(Sqrt(Plus(C1,Power($s("x"),C2))),CN1)),Times(C1,Power(Sqrt(Plus(C1,Power($s("x"),C2))),CN1)),Part($s("v"),C1),$s("x")),If(CotQ($s("v")),SubstForTrig($s("u"),Times(C1,Power(Sqrt(Plus(C1,Power($s("x"),C2))),CN1)),Times($s("x"),Power(Sqrt(Plus(C1,Power($s("x"),C2))),CN1)),Part($s("v"),C1),$s("x")),If(SecQ($s("v")),SubstForTrig($s("u"),Times(C1,Power(Sqrt(Plus(C1,Times(CN1,Power($s("x"),C2)))),CN1)),Times(C1,Power($s("x"),CN1)),Part($s("v"),C1),$s("x")),If(CscQ($s("v")),SubstForTrig($s("u"),Times(C1,Power($s("x"),CN1)),Times(C1,Power(Sqrt(Plus(C1,Times(CN1,Power($s("x"),C2)))),CN1)),Part($s("v"),C1),$s("x")),If(SinhQ($s("v")),SubstForHyperbolic($s("u"),$s("x"),Sqrt(Plus(C1,Power($s("x"),C2))),Part($s("v"),C1),$s("x")),If(CoshQ($s("v")),SubstForHyperbolic($s("u"),Sqrt(Plus(CN1,Power($s("x"),C2))),$s("x"),Part($s("v"),C1),$s("x")),If(TanhQ($s("v")),SubstForHyperbolic($s("u"),Times($s("x"),Power(Sqrt(Plus(C1,Times(CN1,Power($s("x"),C2)))),CN1)),Times(C1,Power(Sqrt(Plus(C1,Times(CN1,Power($s("x"),C2)))),CN1)),Part($s("v"),C1),$s("x")),If(CothQ($s("v")),SubstForHyperbolic($s("u"),Times(C1,Power(Sqrt(Plus(CN1,Power($s("x"),C2))),CN1)),Times($s("x"),Power(Sqrt(Plus(CN1,Power($s("x"),C2))),CN1)),Part($s("v"),C1),$s("x")),If(SechQ($s("v")),SubstForHyperbolic($s("u"),Times(C1,Power(Sqrt(Plus(CN1,Power($s("x"),C2))),CN1)),Times(C1,Power($s("x"),CN1)),Part($s("v"),C1),$s("x")),If(CschQ($s("v")),SubstForHyperbolic($s("u"),Times(C1,Power($s("x"),CN1)),Times(C1,Power(Sqrt(Plus(C1,Power($s("x"),C2))),CN1)),Part($s("v"),C1),$s("x")),SubstForExpn($s("u"),$s("v"),$s("x"))))))))))))))))),
SetDelayed(SubstForExpn($p("u"),$p("v"),$p("x")),
    If(SameQ($s("u"),$s("v")),$s("x"),If(AtomQ($s("u")),$s("u"),Map(Function(SubstForExpn(Slot1,$s("v"),$s("x"))),$s("u"))))),
SetDelayed(SubstForPower($p("u"),$p("bas"),$p("deg"),$p("x")),
    If(AtomQ($s("u")),$s("u"),If(And(And(And(PowerQ($s("u")),ZeroQ(Plus(Part($s("u"),C1),Times(CN1,$s("bas"))))),FreeQ(Part($s("u"),C2),$s("x"))),IntegerQ(Simplify(Times(Part($s("u"),C2),Power($s("deg"),CN1))))),Power($s("x"),Times(Part($s("u"),C2),Power($s("deg"),CN1))),Map(Function(SubstForPower(Slot1,$s("bas"),$s("deg"),$s("x"))),$s("u"))))),
SetDelayed(SubstForTrig($p("u"),$p("sin"),$p("cos"),$p("v"),$p("x")),
    If(AtomQ($s("u")),$s("u"),If(And(TrigQ($s("u")),IntegerQuotientQ(Part($s("u"),C1),$s("v"))),If(Or(SameQ(Part($s("u"),C1),$s("v")),ZeroQ(Plus(Part($s("u"),C1),Times(CN1,$s("v"))))),If(SinQ($s("u")),$s("sin"),If(CosQ($s("u")),$s("cos"),If(TanQ($s("u")),Times($s("sin"),Power($s("cos"),CN1)),If(CotQ($s("u")),Times($s("cos"),Power($s("sin"),CN1)),If(SecQ($s("u")),Times(C1,Power($s("cos"),CN1)),Times(C1,Power($s("sin"),CN1))))))),Map(Function(SubstForTrig(Slot1,$s("sin"),$s("cos"),$s("v"),$s("x"))),ReplaceAll(TrigExpand($(Head($s("u")),Times(Times(Part($s("u"),C1),Power($s("v"),CN1)),$s("x")))),Rule($s("x"),$s("v"))))),If(And(And(And(And(ProductQ($s("u")),CosQ(Part($s("u"),C1))),SinQ(Part($s("u"),C2))),ZeroQ(Plus(Part(Part($s("u"),C1),C1),Times(CN1,Times($s("v"),C1D2))))),ZeroQ(Plus(Part(Part($s("u"),C2),C1),Times(CN1,Times($s("v"),C1D2))))),Times(Times($s("sin"),C1D2),SubstForTrig(Drop($s("u"),C2),$s("sin"),$s("cos"),$s("v"),$s("x"))),Map(Function(SubstForTrig(Slot1,$s("sin"),$s("cos"),$s("v"),$s("x"))),$s("u")))))),
SetDelayed(SubstForHyperbolic($p("u"),$p("sinh"),$p("cosh"),$p("v"),$p("x")),
    If(AtomQ($s("u")),$s("u"),If(And(HyperbolicQ($s("u")),IntegerQuotientQ(Part($s("u"),C1),$s("v"))),If(Or(SameQ(Part($s("u"),C1),$s("v")),ZeroQ(Plus(Part($s("u"),C1),Times(CN1,$s("v"))))),If(SinhQ($s("u")),$s("sinh"),If(CoshQ($s("u")),$s("cosh"),If(TanhQ($s("u")),Times($s("sinh"),Power($s("cosh"),CN1)),If(CothQ($s("u")),Times($s("cosh"),Power($s("sinh"),CN1)),If(SechQ($s("u")),Times(C1,Power($s("cosh"),CN1)),Times(C1,Power($s("sinh"),CN1))))))),Map(Function(SubstForHyperbolic(Slot1,$s("sinh"),$s("cosh"),$s("v"),$s("x"))),ReplaceAll(TrigExpand($(Head($s("u")),Times(Times(Part($s("u"),C1),Power($s("v"),CN1)),$s("x")))),Rule($s("x"),$s("v"))))),If(And(And(And(And(ProductQ($s("u")),CoshQ(Part($s("u"),C1))),SinhQ(Part($s("u"),C2))),ZeroQ(Plus(Part(Part($s("u"),C1),C1),Times(CN1,Times($s("v"),C1D2))))),ZeroQ(Plus(Part(Part($s("u"),C2),C1),Times(CN1,Times($s("v"),C1D2))))),Times(Times($s("sinh"),C1D2),SubstForHyperbolic(Drop($s("u"),C2),$s("sinh"),$s("cosh"),$s("v"),$s("x"))),Map(Function(SubstForHyperbolic(Slot1,$s("sinh"),$s("cosh"),$s("v"),$s("x"))),$s("u")))))),
SetDelayed(SubstForFractionalPowerOfLinear($p("u"),$p("x",$s("Symbol"))),
    Module(List(Set($s("lst"),FractionalPowerOfLinear($s("u"),C1,False,$s("x"))),$s("n"),$s("a"),$s("b"),$s("tmp")),If(Or(FalseQ($s("lst")),FalseQ(Part($s("lst"),C2))),False,CompoundExpression(CompoundExpression(CompoundExpression(CompoundExpression(CompoundExpression(Set($s("n"),Part($s("lst"),C1)),Set($s("a"),Coefficient(Part($s("lst"),C2),$s("x"),C0))),Set($s("b"),Coefficient(Part($s("lst"),C2),$s("x"),C1))),Set($s("tmp"),Times(Power($s("x"),Plus($s("n"),Times(CN1,C1))),SubstForFractionalPower($s("u"),Part($s("lst"),C2),$s("n"),Plus(Times(Times(CN1,$s("a")),Power($s("b"),CN1)),Times(Power($s("x"),$s("n")),Power($s("b"),CN1))),$s("x"))))),Set($s("tmp"),SplitFreeFactors(Regularize($s("tmp"),$s("x")),$s("x")))),List(Part($s("tmp"),C2),$s("n"),Part($s("lst"),C2),Times(Part($s("tmp"),C1),Power($s("b"),CN1))))))),
SetDelayed(FractionalPowerOfLinear($p("u"),$p("n"),$p("v"),$p("x")),
    If(Or(AtomQ($s("u")),FreeQ($s("u"),$s("x"))),List($s("n"),$s("v")),If(CalculusQ($s("u")),False,If(And(And(FractionalPowerQ($s("u")),LinearQ(Part($s("u"),C1),$s("x"))),Or(FalseQ($s("v")),ZeroQ(Plus(Part($s("u"),C1),Times(CN1,$s("v")))))),List(LCM(Denominator(Part($s("u"),C2)),$s("n")),Part($s("u"),C1)),Catch(Module(List(Set($s("lst"),List($s("n"),$s("v")))),CompoundExpression(Scan(Function(If(FalseQ(Set($s("lst"),FractionalPowerOfLinear(Slot1,Part($s("lst"),C1),Part($s("lst"),C2),$s("x")))),Throw(False))),$s("u")),$s("lst")))))))),
SetDelayed(SubstForFractionalPowerOfQuotientOfLinears($p("u"),$p("x",$s("Symbol"))),
    Module(List(Set($s("lst"),FractionalPowerOfQuotientOfLinears($s("u"),C1,False,$s("x"))),$s("n"),$s("a"),$s("b"),$s("c"),$s("d"),$s("tmp")),If(Or(FalseQ($s("lst")),FalseQ(Part($s("lst"),C2))),False,CompoundExpression(CompoundExpression(CompoundExpression(CompoundExpression(CompoundExpression(CompoundExpression(CompoundExpression(Set($s("n"),Part($s("lst"),C1)),Set($s("tmp"),Part($s("lst"),C2))),Set($s("lst"),QuotientOfLinearsParts($s("tmp"),$s("x")))),Set($s("a"),Part($s("lst"),C1))),Set($s("b"),Part($s("lst"),C2))),Set($s("c"),Part($s("lst"),C3))),Set($s("d"),Part($s("lst"),C4))),If(ZeroQ($s("d")),False,CompoundExpression(CompoundExpression(Set($s("lst"),Times(Power($s("x"),Plus($s("n"),Times(CN1,C1))),Times(SubstForFractionalPower($s("u"),$s("tmp"),$s("n"),Times(Plus(Times(CN1,$s("a")),Times($s("c"),Power($s("x"),$s("n")))),Power(Plus($s("b"),Times(CN1,Times($s("d"),Power($s("x"),$s("n"))))),CN1)),$s("x")),Power(Power(Plus($s("b"),Times(CN1,Times($s("d"),Power($s("x"),$s("n"))))),C2),CN1)))),Set($s("lst"),SplitFreeFactors(Regularize($s("lst"),$s("x")),$s("x")))),List(Part($s("lst"),C2),$s("n"),$s("tmp"),Times(Part($s("lst"),C1),Plus(Times($s("b"),$s("c")),Times(CN1,Times($s("a"),$s("d")))))))))))),
SetDelayed(SubstForFractionalPowerQ($p("u"),$p("v"),$p("x",$s("Symbol"))),
    If(Or(AtomQ($s("u")),FreeQ($s("u"),$s("x"))),True,If(FractionalPowerQ($s("u")),SubstForFractionalPowerAuxQ($s("u"),$s("v"),$s("x")),Catch(CompoundExpression(Scan(Function(If(Not(SubstForFractionalPowerQ(Slot1,$s("v"),$s("x"))),Throw(False))),$s("u")),True))))),
SetDelayed(SubstForFractionalPowerAuxQ($p("u"),$p("v"),$p("x")),
    If(AtomQ($s("u")),False,If(And(FractionalPowerQ($s("u")),ZeroQ(Plus(Part($s("u"),C1),Times(CN1,$s("v"))))),True,Catch(CompoundExpression(Scan(Function(If(SubstForFractionalPowerAuxQ(Slot1,$s("v"),$s("x")),Throw(True))),$s("u")),False))))),
SetDelayed(FractionalPowerOfQuotientOfLinears($p("u"),$p("n"),$p("v"),$p("x")),
    If(Or(AtomQ($s("u")),FreeQ($s("u"),$s("x"))),List($s("n"),$s("v")),If(CalculusQ($s("u")),False,If(And(And(FractionalPowerQ($s("u")),QuotientOfLinearsQ(Part($s("u"),C1),$s("x"))),Or(FalseQ($s("v")),ZeroQ(Plus(Part($s("u"),C1),Times(CN1,$s("v")))))),List(LCM(Denominator(Part($s("u"),C2)),$s("n")),Part($s("u"),C1)),Catch(Module(List(Set($s("lst"),List($s("n"),$s("v")))),CompoundExpression(Scan(Function(If(FalseQ(Set($s("lst"),FractionalPowerOfQuotientOfLinears(Slot1,Part($s("lst"),C1),Part($s("lst"),C2),$s("x")))),Throw(False))),$s("u")),$s("lst")))))))),
SetDelayed(SubstForInverseFunctionOfLinear($p("u"),$p("x",$s("Symbol"))),
    Module(List(Set($s("tmp"),InverseFunctionOfLinear($s("u"),$s("x"))),$s("h"),$s("a"),$s("b")),If(FalseQ($s("tmp")),False,CompoundExpression(CompoundExpression(CompoundExpression(Set($s("h"),InverseFunction(Head($s("tmp")))),Set($s("a"),Coefficient(Part($s("tmp"),C1),$s("x"),C0))),Set($s("b"),Coefficient(Part($s("tmp"),C1),$s("x"),C1))),List(Times(SubstForInverseFunction($s("u"),$s("tmp"),Plus(Times(Times(CN1,$s("a")),Power($s("b"),CN1)),Times($($s("h"),$s("x")),Power($s("b"),CN1))),$s("x")),D($($s("h"),$s("x")),$s("x"))),$s("tmp"),$s("b")))))),
SetDelayed(InverseFunctionOfLinear($p("u"),$p("x",$s("Symbol"))),
    If(Or(AtomQ($s("u")),CalculusQ($s("u"))),False,If(And(InverseFunctionQ($s("u")),LinearQ(Part($s("u"),C1),$s("x"))),$s("u"),Module(List($s("tmp")),Catch(CompoundExpression(Scan(Function(If(NotFalseQ(Set($s("tmp"),InverseFunctionOfLinear(Slot1,$s("x")))),Throw($s("tmp")))),$s("u")),False)))))),
SetDelayed(SubstForInverseFunctionOfQuotientOfLinears($p("u"),$p("x",$s("Symbol"))),
    Module(List(Set($s("tmp"),InverseFunctionOfQuotientOfLinears($s("u"),$s("x"))),$s("h"),$s("a"),$s("b"),$s("c"),$s("d"),$s("lst")),If(FalseQ($s("tmp")),False,CompoundExpression(CompoundExpression(CompoundExpression(CompoundExpression(CompoundExpression(CompoundExpression(Set($s("h"),InverseFunction(Head($s("tmp")))),Set($s("lst"),QuotientOfLinearsParts(Part($s("tmp"),C1),$s("x")))),Set($s("a"),Part($s("lst"),C1))),Set($s("b"),Part($s("lst"),C2))),Set($s("c"),Part($s("lst"),C3))),Set($s("d"),Part($s("lst"),C4))),List(Times(SubstForInverseFunction($s("u"),$s("tmp"),Times(Plus(Times(CN1,$s("a")),Times($s("c"),$($s("h"),$s("x")))),Power(Plus($s("b"),Times(CN1,Times($s("d"),$($s("h"),$s("x"))))),CN1)),$s("x")),Times(D($($s("h"),$s("x")),$s("x")),Power(Power(Plus($s("b"),Times(CN1,Times($s("d"),$($s("h"),$s("x"))))),C2),CN1))),$s("tmp"),Plus(Times($s("b"),$s("c")),Times(CN1,Times($s("a"),$s("d"))))))))),
SetDelayed(InverseFunctionOfQuotientOfLinears($p("u"),$p("x",$s("Symbol"))),
    If(Or(AtomQ($s("u")),CalculusQ($s("u"))),False,If(And(InverseFunctionQ($s("u")),QuotientOfLinearsQ(Part($s("u"),C1),$s("x"))),$s("u"),Module(List($s("tmp")),Catch(CompoundExpression(Scan(Function(If(NotFalseQ(Set($s("tmp"),InverseFunctionOfQuotientOfLinears(Slot1,$s("x")))),Throw($s("tmp")))),$s("u")),False)))))),
SetDelayed(SubstForFractionalPower($p("u"),$p("v"),$p("n"),$p("w"),$p("x",$s("Symbol"))),
    If(AtomQ($s("u")),If(SameQ($s("u"),$s("x")),$s("w"),$s("u")),If(And(FractionalPowerQ($s("u")),ZeroQ(Plus(Part($s("u"),C1),Times(CN1,$s("v"))))),Power($s("x"),Times($s("n"),Part($s("u"),C2))),Map(Function(SubstForFractionalPower(Slot1,$s("v"),$s("n"),$s("w"),$s("x"))),$s("u"))))),
SetDelayed(SubstForInverseFunction($p("u"),$p("v"),$p("x",$s("Symbol"))),
    SubstForInverseFunction($s("u"),$s("v"),Times(Plus(Times(CN1,Coefficient(Part($s("v"),C1),$s("x"),C0)),$(InverseFunction(Head($s("v"))),$s("x"))),Power(Coefficient(Part($s("v"),C1),$s("x"),C1),CN1)),$s("x"))),
SetDelayed(SubstForInverseFunction($p("u"),$p("v"),$p("w"),$p("x",$s("Symbol"))),
    If(AtomQ($s("u")),If(SameQ($s("u"),$s("x")),$s("w"),$s("u")),If(And(SameQ(Head($s("u")),Head($s("v"))),ZeroQ(Plus(Part($s("u"),C1),Times(CN1,Part($s("v"),C1))))),$s("x"),Map(Function(SubstForInverseFunction(Slot1,$s("v"),$s("w"),$s("x"))),$s("u"))))),
SetDelayed(SubstForInverseLinear($p("u"),$p("x",$s("Symbol"))),
    Module(List(Set($s("lst"),FunctionOfInverseLinear($s("u"),$s("x"))),$s("a"),$s("b")),If(FalseQ($s("lst")),False,CompoundExpression(CompoundExpression(Set($s("a"),Part($s("lst"),C1)),Set($s("b"),Part($s("lst"),C2))),List(RegularizeSubst($s("u"),$s("x"),Plus(Times(Times(CN1,$s("a")),Power($s("b"),CN1)),Times(C1,Power(Times($s("b"),$s("x")),CN1)))),Plus($s("a"),Times($s("b"),$s("x"))),$s("b")))))),
SetDelayed(DerivativeDivides($p("u"),$p("v"),$p("x",$s("Symbol"))),
    If(If(PolynomialQ($s("u"),$s("x")),And(PolynomialQ($s("v"),$s("x")),Equal(Exponent($s("v"),$s("x")),Plus(Exponent($s("u"),$s("x")),Times(CN1,C1)))),EasyDQ($s("u"),$s("x"))),Module(List(Set($s("w"),Block(List(Set($s("ShowSteps"),False)),D($s("u"),$s("x"))))),If(ZeroQ($s("w")),False,CompoundExpression(Set($s("w"),Simplify(Times($s("v"),Power($s("w"),CN1)))),If(FreeQ($s("w"),$s("x")),$s("w"),False)))),False)),
SetDelayed(EasyDQ($p("u"),$p("x",$s("Symbol"))),
    If(Or(Or(AtomQ($s("u")),FreeQ($s("u"),$s("x"))),Equal(Length($s("u")),C0)),True,If(CalculusQ($s("u")),False,If(Equal(Length($s("u")),C1),EasyDQ(Part($s("u"),C1),$s("x")),If(And(RationalFunctionQ($s("u"),$s("x")),SameQ(RationalFunctionExponents($s("u"),$s("x")),List(C1,C1))),True,If(ProductQ($s("u")),If(FreeQ(First($s("u")),$s("x")),EasyDQ(Rest($s("u")),$s("x")),If(FreeQ(Rest($s("u")),$s("x")),EasyDQ(First($s("u")),$s("x")),False)),If(SumQ($s("u")),And(EasyDQ(First($s("u")),$s("x")),EasyDQ(Rest($s("u")),$s("x"))),If(Equal(Length($s("u")),C2),If(FreeQ(Part($s("u"),C1),$s("x")),EasyDQ(Part($s("u"),C2),$s("x")),If(FreeQ(Part($s("u"),C2),$s("x")),EasyDQ(Part($s("u"),C1),$s("x")),False)),False)))))))),
SetDelayed(Rt(Times($p("v",true),Power($p("u"),$p("w"))),$p("n",$s("Integer"))),
    Condition(Module(List(Set($s("m"),Numerator(NumericFactor($s("w"))))),Condition(Times(Rt($s("v"),$s("n")),Power(Rt(Power($s("u"),Times($s("w"),Power($s("m"),CN1))),Times($s("n"),Power(GCD($s("m"),$s("n")),CN1))),Times($s("m"),Power(GCD($s("m"),$s("n")),CN1)))),Greater($s("m"),C1))),Not(NegativeOrZeroQ($s("v"))))),
SetDelayed(Rt(Times($p("u"),Power($p("v"),$p("m"))),$p("n",$s("Integer"))),
    Condition(Times(Rt(Times(CN1,$s("u")),$s("n")),Power(Rt(Times(CN1,Power($s("v"),Times(CN1,$s("m")))),$s("n")),CN1)),And(And(RationalQ($s("m")),Less($s("m"),C0)),NegativeQ($s("u"))))),
SetDelayed(Rt(Times($p("u"),$p("v")),$p("n",$s("Integer"))),
    Condition(Times(Rt($s("u"),$s("n")),Rt($s("v"),$s("n"))),Or(OddQ($s("n")),And(Not(NegativeOrZeroQ($s("u"))),Not(NegativeOrZeroQ($s("v"))))))),
SetDelayed(Rt(Times($p("u",true),Power(Plus($p("a"),Times($p("b",true),Power(Sin($p("v")),C2))),$p("m",true))),$p("n",$s("Integer"))),
    Condition(Rt(Times($s("u"),Power(Times($s("a"),Power(Cos($s("v")),C2)),$s("m"))),$s("n")),ZeroQ(Plus($s("a"),$s("b"))))),
SetDelayed(Rt(Times($p("u",true),Power(Plus($p("a"),Times($p("b",true),Power(Cos($p("v")),C2))),$p("m",true))),$p("n",$s("Integer"))),
    Condition(Rt(Times($s("u"),Power(Times($s("a"),Power(Sin($s("v")),C2)),$s("m"))),$s("n")),ZeroQ(Plus($s("a"),$s("b"))))),
SetDelayed(Rt(Times($p("u",true),Power(Plus($p("a"),Times($p("b",true),Power(Sinh($p("v")),C2))),$p("m",true))),$p("n",$s("Integer"))),
    Condition(Rt(Times($s("u"),Power(Times($s("a"),Power(Cosh($s("v")),C2)),$s("m"))),$s("n")),ZeroQ(Plus($s("a"),Times(CN1,$s("b")))))),
SetDelayed(Rt(Times($p("u",true),Power(Plus($p("a"),Times($p("b",true),Power(Cosh($p("v")),C2))),$p("m",true))),$p("n",$s("Integer"))),
    Condition(Rt(Times($s("u"),Power(Times($s("b"),Power(Sinh($s("v")),C2)),$s("m"))),$s("n")),ZeroQ(Plus($s("a"),$s("b"))))),
SetDelayed(Rt($p("u"),$p("n",$s("Integer"))),
    Module(List(Set($s("v"),Simplify($s("u")))),CompoundExpression(If(Less(LeafCount(Together($s("v"))),LeafCount($s("v"))),Set($s("v"),Together($s("v")))),If(UnsameQ($s("v"),$s("u")),Rt($s("v"),$s("n")),Power($s("u"),Times(C1,Power($s("n"),CN1))))))),
SetDelayed(Mods($p("u")),
    If(Less(LeafCount(Plus(C1D2,Times(CN1,$s("u")))),LeafCount($s("u"))),Times(ArcCot(Tan(Times(Pi,Plus(C1D2,Times(CN1,$s("u")))))),Power(Pi,CN1)),Times(ArcTan(Tan(Times(Pi,$s("u")))),Power(Pi,CN1)))),
SetDelayed(Mods($p("n")),
    Condition(Plus(C1D2,Times(CN1,Times(Mod(Plus(C1,Times(CN1,Times(C2,$s("n")))),C2),C1D2))),NumericQ($s("n"))))
  );
}
